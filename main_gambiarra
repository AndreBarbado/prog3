#include"class_lib.h"
#include<list>
//consulta funcoes de lista 

//it=minha_lista.beguin()
//advance(it,5); //avanca 5
class data{


};

class cliente{
    public:
        std::string nome_cliente;
        //data data_cadastro;
        std::string regiao;
        std::string categoria;
        
        void print_cliente(){
            std::cout<<nome_cliente<<std::endl;
            std::cout<<regiao<<std::endl;
            std::cout<<categoria<<std::endl;
        }
    
    private:
    protected:
};

class lista_cliente{
        std::list<cliente> m_lista_cliente;
        std::list<cliente>::iterator it;

        void novo_cliente(){
            cliente a;
            m_lista_cliente.push_front(a); //adc novo lote no inicio
        }
};


class bandeira{
    public:
    std::string nome_bandeira;
    float taxa[12];
    
    private:
    protected:
};

class maquina_de_cartao{
    public:
    std:: string nome_maquina;
    bool recebe_a_vista;
 //   data data_cadastro;
 //   bool esta_ativo;

    //------------- inicia lista de bandeira

    std::list<bandeira> lista_bandeira;
    std::list<bandeira>::iterator it;

    //------------- opera lista de maquina de cartao
    
        void nova_bandeira(){
        bandeira a;
        lista_bandeira.push_front(a); //adc novo lote no inicio

    }


    private:
    protected:
};

class lista_maquina_de_cartao{
        std::list<maquina_de_cartao> m_lista_maquina_de_cartao;
        std::list<maquina_de_cartao>::iterator it;

        void nova_maquina_de_cartao(){
            maquina_de_cartao a;
            m_lista_maquina_de_cartao.push_front(a); //adc novo lote no inicio
        }
};

class forma_pagamento{
    public:
    std::string nome_forma_de_pag;
    int n_de_parcelas;
    bandeira m_bandeira;
    maquina_de_cartao m_maquina;
    
    private:
    protected:
};

// class consiguinado{
//     public:
//         data data_entrega;
//         int qnt_deixado;
//         int qnt_vendida;
//     private:
//     protected:
// };

class vendas{
    public:
        cliente *cel_cliente;
        //lote *cel_lote;
        forma_pagamento pag;
        int  qnt;
        int  bonificacao;
        bool eh_consignado;
        float valor_total;
        //data data_venda;

        bool finalizado;



        //---------------------funcoes
        void print_vendas(){
            cel_cliente->print_cliente();
            std::cout<<qnt<<std::endl;
            std::cout<<bonificacao<<std::endl;
            std::cout<<eh_consignado<<std::endl;
            std::cout<<valor_total<<std::endl;
        }



        //----------------------construtores
        //vendas(){}
        vendas(cliente *m_cliente, int m_qnt,int m_bonificacao,float m_valor_total)
        : cel_cliente(m_cliente) , qnt(m_qnt),bonificacao(m_bonificacao),eh_consignado(false), valor_total(m_valor_total){}


    private:
    protected:
};

class lote{

    private:
    friend class produto;

    //-----------------------//
    std::string nome_lote;   //
    int qnt;                 //
    float preco_unidade;     //
    bool consignado;         //
    // data vencimento;      //
    // data data_retirada;   //
    // data data_pagamento;  //
    //---------------------- //

    public:
    //-------------construtores
    //lote(){}

    lote(std::string m_lote,int m_qnt,float m_preco_unidade,bool m_consiguinado)
         : nome_lote(m_lote),qnt(m_qnt),preco_unidade(m_preco_unidade),consignado(m_consiguinado){}

    void set_qnt(int a){
        if (a>=0)
            qnt=a;
    }

    void set_preco_unidade(float b){
            preco_unidade=b;
    }

    void set_consignado(bool a){
            consignado=a;
    }

    int get_qnt(void){
        return qnt;
    }

    float get_preco_unidade(void){
        return preco_unidade;
    }

    bool get_consignado(void){
        return consignado;
    }


    void print_lote(){
          std::cout << std::endl;
          std::cout << qnt << std::endl;
          std::cout << preco_unidade << std:: endl;
          std::cout << consignado << std:: endl;
    }

    //--------------------------------lista vendas

    std::list<vendas> lista_vendas;
    std::list<vendas>::iterator it;

    void nova_venda(cliente *m_cliente, int m_qnt,int m_bonificacao,float m_valor_total){
        vendas a(m_cliente,m_qnt,m_bonificacao,m_valor_total);
        lista_vendas.push_front(a); //adc novo lote no inicio
    }
         


    protected:
};

class produto{
    public:
        //-------------lista de lotes--
        std::list<lote> lista_lote;
        std::list<lote>::iterator it;

        //-------------construtor------

        produto(std::string m_nome):nome_do_produto(m_nome){}

        void novo_lote(std::string m_lote,int m_qnt,float m_preco_unidade,bool m_consiguinado){
            lote a(m_lote,m_qnt,m_preco_unidade,m_consiguinado);
            lista_lote.push_front(a); //adc novo lote no inicio
        }

        std::string nome_do_produto; 
        private:
        friend class lote;
    protected:

};

class parque{
    public:
        std::string nome;  

        //-------------construtor--------------------------
        parque(std::string m_nome):nome(m_nome){}  

        //-------------criando lista de produtos-----------
        std::list<produto> lista_produto;
        std::list<produto>::iterator it;

        void novo_produto(std::string nome){
            produto a(nome);
            lista_produto.push_front(a); //adc novo lote no inicio
        }

        void print_lista_produto(){

        for ( it = lista_produto.begin(); it != lista_produto.end(); it++ ){
                std::cout << "Imprimindo a lista...: " << it->nome_do_produto << std::endl;
        }
    }   



    private:
    protected:
};

class lista_parques{

        std::list<parque> mlista_parques;
        std::list<parque>::iterator it;

    public:
        void novo_parque(std::string nome){
            parque a(nome);
            mlista_parques.push_front(a); //adc novo lote no inicio

        }
        void print_lista_parque(){
            std::list<parque>::iterator it;

            for ( it = mlista_parques.begin(); it != mlista_parques.end(); it++ ){
                 std::cout << "Imprimindo a lista...: " << it->nome << std::endl;
            }
        }  

        void print_lista_parque_produtos(){
            std::list<parque>::iterator it;

            for ( it = mlista_parques.begin(); it != mlista_parques.end(); it++ ){
                 std::cout << "Imprimindo a lista...: " << it->nome << std::endl;
                 it->print_lista_produto();
            }
        } 

        std::list<parque>::iterator busca_parque(std::string nome){

            for ( it = mlista_parques.begin(); it != mlista_parques.end(); it++ ){
                 //std::cout << "Imprimindo a lista...: " << it->nome << std::endl;
                 if (it->nome==nome){
                     return it;
                 }
            }
            return it;
        }
         
};

// class consiguinado{
//     public:
//         data data_entrega;
//         int qnt_deixado;
//         int qnt_vendida;
//     private:
//     protected:
// };

// class vendas{
//     public:
//         cliente *cel_cliente;
//         //lote *cel_lote;
//         forma_pagamento pag;
//         int  qnt;
//         int  bonificacao;
//         bool eh_consiguinado;
//         float valor_total;
//         data data_venda;

//         bool finalizado;
         
//     private:
//     protected:
// };


using namespace std;
int main(){
    std:: cout << "eae parceiro"<<std::endl;

    lista_parques p_list;

    cliente cliente_teste;



    cliente_teste.nome_cliente= "porto seguro";
    cliente_teste.regiao="norte";
    cliente_teste.categoria="empresa";

    cliente_teste.print_cliente();

    vendas vendas_teste(&cliente_teste,10,0,1000.0);

    vendas_teste.print_vendas();

    //CRIA PARQUES
    p_list.novo_parque("hopihari");

    //p_list.print_lista_parque();

    p_list.novo_parque("wetnwild");

    //p_list.print_lista_parque();

    std::cout<<p_list.busca_parque("hopihai")->nome<<std::endl;


    // cout<< prod.lote_list_inicio->get_qnt() << endl;
    // cout<< prod.lote_list_inicio->get_consignado() << endl;
    // cout<< prod.lote_list_inicio->get_preco_unidade() << endl;



    
    return 0;
}
